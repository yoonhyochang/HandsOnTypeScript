{
  "compilerOptions": {
    /* 방문 https://aka.ms/tsconfig 이 파일에 대한 자세한 정보를 읽으십시오. */

    /* 프로젝트 */
    // "incremental": true,                              /* 프로젝트의 증분 컴파일을 허용하기 위해 .tsbuildinfo 파일을 저장합니다. */
    // "composite": true,                                /* 프로젝트 참조와 함께 사용할 수 있도록 제약 조건을 활성화합니다. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* .tsbuildinfo 증분 컴파일 파일의 경로를 지정합니다. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* 복합 프로젝트를 참조할 때 선언 파일 대신 소스 파일을 선호하는 것을 비활성화합니다. */
    // "disableSolutionSearching": true,                 /* 프로젝트가 편집 중 다중 프로젝트 참조 검사에서 제외되도록 선택합니다. */
    // "disableReferencedProjectLoad": true,             /* TypeScript가 자동으로 로드하는 프로젝트 수를 줄입니다. */

    /* 언어와 환경 */
    "target": "es2016",                                  /* 생성된 JavaScript의 JavaScript 언어 버전을 설정하고 호환되는 라이브러리 선언을 포함합니다. */
    // "lib": [],                                        /* 대상 런타임 환경을 설명하는 일련의 번들 라이브러리 선언 파일을 지정합니다. */
    // "jsx": "preserve",                                /* 생성되는 JSX 코드를 지정합니다. */
    // "experimentalDecorators": true,                   /* 레거시 실험적 데코레이터에 대한 실험적 지원을 활성화합니다. */
    // "emitDecoratorMetadata": true,                    /* 소스 파일에서 장식된 선언에 대한 디자인 유형 메타데이터를 내보냅니다. */
    // "jsxFactory": "",                                 /* React JSX emit을 대상으로 할 때 사용되는 JSX 팩토리 함수를 지정합니다. 예: 'React.createElement' 또는 'h'. */
    // "jsxFragmentFactory": "",                         /* React JSX emit을 대상으로 할 때 프래그먼트에 사용되는 JSX 프래그먼트 참조를 지정합니다. 예: 'React.Fragment' 또는 'Fragment'. */
    // "jsxImportSource": "",                            /* 'jsx: react-jsx*'를 사용할 때 JSX 팩토리 함수를 가져오기 위해 사용되는 모듈 지정자를 지정합니다. */
    // "reactNamespace": "",                             /* 'createElement'에 대해 호출되는 객체를 지정합니다. 이것은 'react' JSX emit을 대상으로 할 때만 적용됩니다. */
    // "noLib": true,                                    /* 기본 lib.d.ts를 포함하여 모든 라이브러리 파일을 포함하는 것을 비활성화합니다. */
    // "useDefineForClassFields": true,                  /* ECMAScript 표준 준수 클래스 필드를 내보냅니다. */
    // "moduleDetection": "auto",                        /* 모듈 형식 JS 파일을 감지하는 데 사용되는 방법을 제어합니다. */

    /* 모듈 */
    "module": "commonjs",                                /* 생성된 모듈 코드를 지정합니다. */
    // "rootDir": "./",                                  /* 소스 파일 내의 루트 폴더를 지정합니다. */
    // "moduleResolution": "node10",                     /* TypeScript가 주어진 모듈 지정자에서 파일을 찾는 방법을 지정합니다. */
    // "baseUrl": "./",                                  /* 비 상대 모듈 이름을 해석하기 위한 기본 디렉토리를 지정합니다. */
    // "paths": {},                                      /* 추가 조회 위치로 가져오기를 재매핑하는 엔트리 세트를 지정합니다. */
    // "rootDirs": [],                                   /* 모듈을 확인할 때 하나로 취급되는 여러 폴더를 허용합니다. */
    // "typeRoots": [],                                  /* './node_modules/@types'처럼 작동하는 여러 폴더를 지정합니다. */
    // "types": [],                                      /* 소스 파일에서 참조되지 않고 포함될 유형 패키지 이름을 지정합니다. */
    // "allowUmdGlobalAccess": true,                     /* UMD 선언의 글로벌 검색을 허용합니다. */
    // "resolveJsonModule": true,                        /* JSON 파일을 가져올 수 있게 합니다. */
    // "noResolve": true,                                /* 입력 파일에서 "import"가 참조하고 있는 파일이 모듈로 취급되지 않도록 만듭니다. */

    /* JavaScript 프로젝트에 사용할 설정 */
    // "allowJs": true,                                  /* JavaScript 파일을 프로그램의 일부로 허용합니다. */
    // "checkJs": true,                                  /* JavaScript 파일에 대한 오류를 보고합니다. */
    // "maxNodeModuleJsDepth": 1,                        /* Node.js 폴더에 대한 JavaScript 파일을 검사할 최대 깊이를 지정합니다. */

    /* 파일 풀용 */
    // "outDir": "./",                                   /* 출력 파일을 위한 폴더를 지정합니다. */
    // "outFile": "./",                                  /* 파일을 단일 출력 파일로 병합합니다. */
    // "declaration": true,                              /* 생성된 코드에 대한 .d.ts 파일을 생성합니다. */
    // "declarationMap": true,                           /* 내보낸 내용의 출처로 이동할 수 있는지 여부를 결정하는지 여부를 지정합니다. */
    // "sourceRoot": "",                                 /* 디버거가 TypeScript 파일을 디스크에 있는 위치로 해석하는 방법을 지정합니다. */
    // "mapRoot": "",                                    /* 생성된 '.map' 파일을 디스크에 있는 위치로 해석하는 방법을 지정합니다. */
    // "inlineSourceMap": true,                          /* 생성된 '.js' 파일에 소스 맵을 내장합니다. */
    // "inlineSources": true,                            /* 생성된 '.js.map' 파일에 소스 파일 내용을 포함시킵니다. */

    /* 출력과 관련된 옵션 */
    // "removeComments": true,                           /* 컴파일 출력에서 주석을 제거합니다. */
    // "noEmit": true,                                   /* 출력 파일을 생성하지 않습니다. */
    // "importHelpers": true,                            /* 컴파일 된 코드에 헬퍼 함수를 가져옵니다. 'tslib' 패키지가 필요합니다. */
    // "downlevelIteration": true,                       /* 이전 버전의 ECMAScript에서 `for..of`를 지원합니다. */
    // "sourceMap": true,                                /* 전체 소스 맵 파일을 생성하여 디버거가 소스 파일을 디스크에 있는 위치로 해석할 수 있게 합니다. */
    // "declarationDir": "./",                           /* 생성된 선언 파일을 내보낼 디렉토리를 지정합니다. */
    // "emitBOM": true,                                  /* 생성된 출력에 UTF-8 바이트 순서 표시(BOM)를 포함합니다. */
    // "newLine": "crlf",                                /* 줄 끝을 결정하는 토큰을 지정합니다. */
    // "stripInternal": true,                            /* 주석 'internal'을 가진 선언을 내보내지 않도록 지정합니다. */
    // "noEmitHelpers": true,                            /* 컴파일된 코드에 헬퍼 함수를 생성하지 않습니다. */
    // "skipLibCheck": true,                             /* 선언 파일의 유형 확인을 건너뜁니다. */
    // "forceConsistentCasingInFileNames": true,         /* 파일 이름 사이의 대소문자가 일치하도록 강제합니다. */
    // "pretty": true,                                   /* 오류 및 메시지에 대한 더 나은 서식을 사용합니다. */
    // "allowUnreachableCode": false,                    /* 코드 흐름 분석 중에 도달할 수 없는 코드가 허용되도록 지정합니다. */
    // "allowUnusedLabels": false,                       /* 사용되지 않는 레이블이 허용되도록 지정합니다. */
    // "noImplicitReturns": true,                        /* 모든 코드 경로에서 값을 반환하는 것을 강제합니다. */
    // "noFallthroughCasesInSwitch": true,               /* switch 문에서 case 절을 거치지 않도록 강제합니다. */
    // "importsNotUsedAsValues": "error",               /* import 형식의 값 사용 방식을 지정합니다. */

    /* 작업 환경 */
    // "preserveSymlinks": true,                         /* 심볼릭 링크를 해결하지 않고 그대로 유지합니다. */
    // "preserveWatchOutput": true,                      /* 파일 보기를 사용할 때 출력을 지속적으로 유지합니다. */
    // "isolatedModules": true,                          /* 각 파일이 독립된 모듈로 변환됩니다. */

    /* 실험적 */
    // "emitDecoratorLegacies": true,                    /* 레거시 데코레이터 에미션을 활성화합니다. */
    // "useUnknownInCatchVariables": true,               /* 모든 catch 변수가 'unknown' 형식이 되도록 지정합니다. */
    // "exactOptionalPropertyTypes": true,               /* 선택적 속성을 정확하게 표시합니다. */

    /* 프로그램의 진단 및 타입 */
    // "strict": true,                                   /* 모든 엄격한 타입 검사 옵션을 활성화합니다. */
    // "noImplicitAny": true,                            /* 'any' 형식이 암시적으로 포함되어 있는 위치에 대한 오류를 발생시킵니다. */
    // "strictNullChecks": true,                         /* 엄격한 null 검사를 활성화합니다. */
    // "strictFunctionTypes": true,                      /* 함수 타입의 엄격한 'this' 타입 검사를 활성화합니다. */
    // "strictPropertyInitialization": true,             /* 클래스 프로퍼티의 엄격한 초기화 검사를 활성화합니다. */
    // "noImplicitThis": true,                           /* 'this' 표현식에 암시적 'any'
    // "useUnknownInCatchVariables": true,               /* 'any' 대신 'unknown'으로 기본 catch 절 변수를 사용합니다. */
    // "alwaysStrict": true,                             /* 'use strict'이 항상 포함되도록 합니다. */
    // "noUnusedLocals": true,                           /* 로컬 변수가 읽히지 않을 때 오류 보고를 활성화합니다. */
    // "noUnusedParameters": true,                       /* 함수 매개변수가 읽히지 않을 때 오류를 발생시킵니다. */
    // "exactOptionalPropertyTypes": true,               /* 'undefined'를 추가하는 대신 선택적 속성 유형을 그대로 해석합니다. */
    // "noImplicitReturns": true,                        /* 함수에서 명시적으로 반환하지 않는 코드 경로에 대한 오류 보고를 활성화합니다. */
    // "noFallthroughCasesInSwitch": true,               /* switch 문에서 fallthrough 경우에 대한 오류 보고를 활성화합니다. */
    // "noUncheckedIndexedAccess": true,                 /* 인덱스를 사용하여 액세스할 때 형식에 'undefined'를 추가합니다. */
    // "noImplicitOverride": true,                       /* 파생 클래스에서 오버라이딩 멤버가 override 수정자로 표시되도록 합니다. */
    // "noPropertyAccessFromIndexSignature": true,       /* 인덱싱된 유형을 사용하여 선언된 키에 대해 인덱싱된 접근자를 사용하도록 강제합니다. */
    // "allowUnusedLabels": true,                        /* 사용되지 않는 레이블에 대한 오류 보고를 비활성화합니다. */
    // "allowUnreachableCode": true,                     /* 도달할 수 없는 코드에 대한 오류 보고를 비활성화합니다. */

    /* 완전성 */
    // "skipDefaultLibCheck": true,                      /* TypeScript와 함께 포함된 .d.ts 파일의 유형 검사를 건너뜁니다. */
    "skipLibCheck": true                                 /* 모든 .d.ts 파일의 유형 검사를 건너뜁니다. */
  }
}
